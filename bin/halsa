#! /usr/bin/env node

const fs = require('fs')
const exec = require('child_process').execSync
const path = require('path')
const chalk = require('chalk')
const read = require('read-yaml')
const program = require('commander')
const package = require('../package')
const halsa = __dirname
const project = process.cwd()
const timestamp = require('log-timestamp')
const { copySync, unlinkSync } = require('fs-extra')
const start = require('../src/start')
const ghpages = require('gh-pages')

timestamp(() => {
  return `
    ${chalk.green(`[${new Date().toLocaleTimeString()}]`)}
  `.replace(/ PM| AM/g, '').trim()
})

const write = console.log

const info = (message) => {
  return `${chalk.cyan('[info]')} ${message}`
}
const done = (message) => {
  return `${chalk.green('[done]')} ${message}`
}
const error = (message) => {
  return `${chalk.red('[fail]')} ${message}`
}

const configExist = (halsa) => {
  if (!fs.existsSync(halsa)) {
    write(error('Config file not found, please start halsa on valid directory'))
    write(error(`Run ${chalk.bold('halsa --help')} to see a details`))

    process.exit(0)
  }
  
  return read.sync(halsa)
}

program
  .usage('[command] [options]')
  .version(`Halsa CLI v${package.version}`, '-v, --version')

program
  .command('new')
  .usage('halsa new <project>')
  .description('Create new halsa project')
  .action((option) => {
    let directory = 'current'

    write(info(`Using Halsa CLI v${package.version}`))

    if (typeof option === 'object') {
      write(error('Please define <project name> to create project'))
      write(error(`Run ${chalk.bold('halsa --help')} to see a details`))

      process.exit(0)
    }

    if (option !== '.') {
      directory = option
    }

    const source = path.join(halsa, '../template')
    const target = path.join(project, option)

    write(info(`Create halsa project on ${chalk.bold(directory)} directory`))
    copySync(source, target)
    write(done(`Success create project on ${chalk.bold(directory)} directory`))
  })

program
  .command('start')
  .usage('halsa start <project>')
  .description('Run current project directory')
  .action((option) => {
    const target = path.join(project, option)
    const config = configExist(path.join(target, 'halsa.yml'))

    write(info(`Using Halsa CLI v${package.version}`))

    if (typeof option === 'object') {
      write(error('Please define <project name> to start project'))
      write(error(`Run ${chalk.bold('halsa --help')} to see a details`))

      process.exit(0)
    }

    start(
      halsa,
      target,
      config,
      write,
      info,
      done,
      error
    )
  })

program
  .command('deploy')
  .description('Deploy current project to Github Pages')
  .action((option) => {
    const target = path.join(project, option)
    const halsa = path.join(target, 'halsa.yml')
    const config = configExist(halsa)
    const cache = path.resolve(__dirname, '../node_modules/gh-pages/.cache')

    write(info(`Using Halsa CLI v${package.version}`))

    if (typeof option === 'object') {
      write(error('Please define <project name> to start project'))
      write(error(`Run ${chalk.bold('halsa --help')} to see a details`))

      process.exit(0)
    }

    if (fs.existsSync(cache)) {
      exec(`node ${path.resolve(__dirname, '../node_modules/gh-pages/bin/gh-pages-clean.js')}`)
    }
 
    ghpages.publish('.halsa', {
      message: `Auto-generated commit ${new Date()}`,
      branch: config['branch'],
      repo: config['repository']
    }, (err) => {
      console.log(err)
    })
  })

program.parse(process.argv)

if (program.args.length === 0) {
  console.log(`
  Welcome to Halsa CLI v${package.version},
  Use ${chalk.green.bold('halsa --help')} to show help message.
  `)
}