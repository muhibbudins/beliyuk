#! /usr/bin/env node

const { pathExistsSync } = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const program = require('commander')
const package = require('../package')
const root = process.cwd()

program
  .usage('[command] [name | port]')
  .version(`Halsa CLI v${package.version}`, '-v, --version')

program
  .command('new')
  .description('Create new halsa project')
  .action((option) => {
    if (typeof option === 'object' && option.length === undefined) {
      console.log(`[${chalk.red.bold('error')}] Please define project directory, use ${chalk.blue.bold('halsa new [directory]')} to new halsa`)
    }

    if (typeof option !== 'object') {
      // new command
    }
  })

program
  .command('start')
  .description('Run current project directory')
  .action((option) => {
    if (typeof option === 'object') {
      console.log(`[${chalk.red.bold('error')}] Please define project directory, use ${chalk.blue.bold('halsa start [directory]')} to run halsa`)
    }

    if (typeof option === 'string') {
      const current = path.join(root, option)
      const source = path.join(current, 'pages')

      if (pathExistsSync(source)) {
        console.log(`[${chalk.green.bold('halsa')}] Thanks for using Halsa`)
        console.log(`[${chalk.green.bold('halsa')}] Project already running on port 3000`)
        console.log(`[${chalk.yellow.bold('halsa')}] Watching file change ...`)

        // Start server
      } else {
        console.log(`[${chalk.red.bold('error')}] Source directory is undefined in this folder, use ${chalk.blue.bold('halsa start [directory]')} to run halsa`)
      }
    }
  })

program.parse(process.argv)

if (program.args.length === 0) {
  console.log(`
  Welcome to Halsa CLI v${package.version},
  Use ${chalk.green.bold('halsa --help')} to show help message.
  `)
}